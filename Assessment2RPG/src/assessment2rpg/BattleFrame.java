/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package assessment2rpg;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Graphics2D;
import javax.swing.*;
import javax.swing.UIDefaults;
import javax.swing.Painter;
/**
 * ********************
 * Group 75 COMP603/52A Project 2 Sahil Dhanda 20122024
 *
 * @author sahil
 *********************
 */

//BattleFrame
//The main window for the game this is where most of the action takes place.
//user fights their selected opponent in an rpg game style battle
public class BattleFrame extends javax.swing.JFrame {

    /** Creates new form BattleFrame 
     * @param player
     * @param enemy
     */
    public BattleFrame(RPGPlayer player, RPGEnemy enemy) {
        initComponents();
        createdPlayer = player;
        createdEnemy = enemy;
    }
    
    class MyPainter implements Painter<JProgressBar> {

    private final Color color;

    public MyPainter(Color c1) {
        this.color = c1;
    }
    @Override
    public void paint(Graphics2D gd, JProgressBar t, int width, int height) {
        gd.setColor(color);
        gd.fillRect(0, 0, width, height);
    }
}
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        PlayerName = new javax.swing.JLabel();
        PlayerIcon = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PlayerDescription = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        BattleLog = new javax.swing.JTextArea();
        BattleLogHeader = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        NormalAttack = new javax.swing.JButton();
        DefendButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AbilitySelector = new javax.swing.JList<>();
        AbilityCastButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        ForfeitButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        PlayerDescription2 = new javax.swing.JTextArea();
        PlayerImage = new javax.swing.JLabel();
        PlayerName2 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        StatusTextArea = new javax.swing.JTextArea();
        jLayeredPane = new javax.swing.JLayeredPane();
        PlayerManaText = new javax.swing.JLabel();
        PlayerManaBar = new javax.swing.JProgressBar();
        PlayerHealthText = new javax.swing.JLabel();
        PlayerSprite = new javax.swing.JLabel();
        EnemySprite = new javax.swing.JLabel();
        EnemyHealthText = new javax.swing.JLabel();
        PlayerHealthBar = new javax.swing.JProgressBar();
        EnemyHealthBar = new javax.swing.JProgressBar();
        jPanel5 = new javax.swing.JPanel();
        EnemyBurnStatusIcon = new javax.swing.JLabel();
        EnemyVulnerableStatusIcon = new javax.swing.JLabel();
        EnemyRevStatusIcon = new javax.swing.JLabel();
        EnemyShockStatusIcon = new javax.swing.JLabel();
        EnemyBurnStatusLabel = new javax.swing.JLabel();
        EnemyShockStatusLabel = new javax.swing.JLabel();
        EnemyVulnerableStatusLabel = new javax.swing.JLabel();
        EnemyRevStatusLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        PlayerBurnStatusIcon = new javax.swing.JLabel();
        PlayerVulnerableStatusIcon = new javax.swing.JLabel();
        PlayerChargingStatusIcon = new javax.swing.JLabel();
        PlayerShockStatusIcon = new javax.swing.JLabel();
        PlayerBurnStatusLabel = new javax.swing.JLabel();
        PlayerShockStatusLabel = new javax.swing.JLabel();
        PlayerVulnerableStatusLabel = new javax.swing.JLabel();
        PlayerChargingStatusLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COMP603 RPG 2");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        PlayerName.setText(RPGPlayer.name);

        PlayerIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/"+RPGPlayer.className+"Icon.png")));
        PlayerIcon.setText("jLabel2");

        PlayerDescription.setColumns(20);
        PlayerDescription.setLineWrap(true);
        PlayerDescription.setRows(5);
        PlayerDescription.setWrapStyleWord(true);
        jScrollPane2.setViewportView(PlayerDescription);
        PlayerDescription.setText(RPGPlayer.printStatusWithoutSkills());

        BattleLog.setColumns(20);
        BattleLog.setRows(5);
        jScrollPane4.setViewportView(BattleLog);
        BattleLog.append("Turn "+BattleManager.turnCounter+"\n");

        BattleLogHeader.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        BattleLogHeader.setText("Battle Log");

        NormalAttack.setText("Normal Attack");
        NormalAttack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NormalAttackActionPerformed(evt);
            }
        });

        DefendButton.setText("Defend");
        DefendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DefendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(NormalAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(DefendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NormalAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DefendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane.addTab("Attack", jPanel3);

        AbilitySelector.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {""+RPGPlayer.playerClass.getAbility(1).get(0)+" - Mana Cost: "+RPGPlayer.playerClass.getAbility(1).get(3)+" - Desc: "+RPGPlayer.playerClass.getAbility(1).get(1), ""+RPGPlayer.playerClass.getAbility(2).get(0)+" - Mana Cost: "+RPGPlayer.playerClass.getAbility(2).get(3)+" - Desc: "+RPGPlayer.playerClass.getAbility(2).get(1), ""+RPGPlayer.playerClass.getAbility(3).get(0)+" - Mana Cost: "+RPGPlayer.playerClass.getAbility(3).get(3)+" - Desc: "+RPGPlayer.playerClass.getAbility(3).get(1)};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        AbilitySelector.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AbilitySelector.setVisibleRowCount(3);
        AbilitySelector.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                AbilitySelectorValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(AbilitySelector);

        AbilityCastButton.setText("Use Selected Ability");
        AbilityCastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbilityCastButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(AbilityCastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AbilityCastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Ability", jPanel4);

        ForfeitButton.setText("Forfeit / Quit");
        ForfeitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForfeitButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Are you sure you want to forfeit the game?\n\nYou will lose this battle and be returned to the Main Menu");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane5.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(ForfeitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(ForfeitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Forfeit", jPanel6);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(PlayerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addGap(37, 37, 37)
                                        .addComponent(PlayerName)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(BattleLogHeader)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(PlayerName)
                        .addGap(18, 18, 18)
                        .addComponent(PlayerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BattleLogHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        UIDefaults healthBar = new UIDefaults();
        healthBar.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.RED));
        healthBar.put("ProgressBar[Enabled].backgroundPainter", new MyPainter(Color.WHITE));
        JLabel attacktab = new javax.swing.JLabel();
        attacktab.setPreferredSize(new Dimension(140, 30));
        attacktab.setText("Attack");

        JLabel abilitytab = new javax.swing.JLabel();
        abilitytab.setPreferredSize(new Dimension(140, 30));
        abilitytab.setText("Ability");

        JLabel forfeittab = new javax.swing.JLabel();
        forfeittab.setPreferredSize(new Dimension(140, 30));
        forfeittab.setText("Forfeit");

        jTabbedPane.setTabComponentAt(0, attacktab);
        jTabbedPane.setTabComponentAt(1, abilitytab);
        jTabbedPane.setTabComponentAt(2, forfeittab);

        jTabbedPane2.addTab("Battle Window", jPanel2);

        PlayerDescription2.setEditable(false);
        PlayerDescription2.setColumns(20);
        PlayerDescription2.setLineWrap(true);
        PlayerDescription2.setRows(5);
        jScrollPane3.setViewportView(PlayerDescription2);
        PlayerDescription2.setText(RPGPlayer.printStatusWithoutSkills());

        PlayerImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/"+RPGPlayer.className+"Full.png")));

        PlayerName2.setText(RPGPlayer.name);

        StatusTextArea.setEditable(false);
        StatusTextArea.setColumns(20);
        StatusTextArea.setRows(5);
        jScrollPane6.setViewportView(StatusTextArea);
        StatusTextArea.setText(BattleManager.statusCounter());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(PlayerName2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PlayerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(PlayerName2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PlayerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(307, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Status Window", jPanel1);

        jLayeredPane.setBackground(new java.awt.Color(148, 90, 33));
        jLayeredPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLayeredPane.setOpaque(true);

        PlayerManaText.setBackground(new java.awt.Color(255, 204, 0));
        PlayerManaText.setText(BattleManager.playerMana+" / "+RPGPlayer.playerClass.getManaPoints());
        PlayerManaText.setBorder(new javax.swing.border.MatteBorder(null));
        jLayeredPane.add(PlayerManaText);
        PlayerManaText.setBounds(240, 580, 76, 18);
        jLayeredPane.remove(PlayerManaText);
        jLayeredPane.add(PlayerManaText,14);

        PlayerManaBar.setBackground(new java.awt.Color(255, 255, 255));
        PlayerManaBar.setForeground(new java.awt.Color(255, 0, 0));
        PlayerManaBar.setMaximum(101);
        PlayerManaBar.setValue(100);
        PlayerManaBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        PlayerManaBar.setOpaque(true);
        jLayeredPane.add(PlayerManaBar);
        PlayerManaBar.setBounds(110, 570, 300, 40);
        jLayeredPane.remove(PlayerManaBar);
        jLayeredPane.add(PlayerManaBar,16);

        PlayerManaBar.setMaximum(RPGPlayer.playerClass.getManaPoints()+1);
        PlayerManaBar.setValue(BattleManager.playerMana);

        UIDefaults manaBar = new UIDefaults();
        manaBar.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.BLUE));
        manaBar.put("ProgressBar[Enabled].backgroundPainter", new MyPainter(Color.WHITE));
        PlayerManaBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
        PlayerManaBar.putClientProperty("Nimbus.Overrides", manaBar);

        PlayerHealthText.setBackground(new java.awt.Color(255, 204, 51));
        PlayerHealthText.setText(BattleManager.playerHealth+" / "+RPGPlayer.playerClass.getHealthPoints());
        PlayerHealthText.setBorder(new javax.swing.border.MatteBorder(null));
        jLayeredPane.add(PlayerHealthText);
        PlayerHealthText.setBounds(240, 510, 76, 18);
        jLayeredPane.remove(PlayerHealthText);
        jLayeredPane.add(PlayerHealthText,15);

        PlayerSprite.setBackground(new java.awt.Color(102, 255, 0));
        PlayerSprite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/"+RPGPlayer.className+"Full.png")));
        PlayerSprite.setText("PlayerSprite");
        jLayeredPane.add(PlayerSprite);
        PlayerSprite.setBounds(420, 370, 200, 300);
        jLayeredPane.remove(PlayerSprite);
        jLayeredPane.add(PlayerSprite,18);

        EnemySprite.setBackground(new java.awt.Color(255, 0, 0));
        EnemySprite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/"+RPGEnemy.enemyClass.name+"Full.png")));
        EnemySprite.setText("EnemySprite");
        jLayeredPane.add(EnemySprite);
        EnemySprite.setBounds(640, 130, 200, 300);
        jLayeredPane.remove(EnemySprite);
        jLayeredPane.add(EnemySprite,19);

        EnemyHealthText.setBackground(new java.awt.Color(255, 204, 51));
        EnemyHealthText.setText(BattleManager.enemyHealth+" / "+RPGEnemy.enemyClass.getHealthPoints());
        EnemyHealthText.setBorder(new javax.swing.border.MatteBorder(null));
        jLayeredPane.add(EnemyHealthText);
        EnemyHealthText.setBounds(980, 240, 76, 18);
        jLayeredPane.remove(EnemyHealthText);
        jLayeredPane.add(EnemyHealthText,13);

        PlayerHealthBar.setBackground(new java.awt.Color(255, 255, 255));
        PlayerHealthBar.setForeground(new java.awt.Color(255, 0, 0));
        PlayerHealthBar.setMaximum(101);
        PlayerHealthBar.setValue(100);
        PlayerHealthBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        PlayerHealthBar.setOpaque(true);
        jLayeredPane.add(PlayerHealthBar);
        PlayerHealthBar.setBounds(110, 500, 300, 40);
        jLayeredPane.remove(PlayerHealthBar);
        jLayeredPane.add(PlayerHealthBar,17);

        PlayerHealthBar.setMaximum(RPGPlayer.playerClass.getHealthPoints()+1);
        PlayerHealthBar.setValue(RPGPlayer.playerHealth);

        healthBar.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.RED));
        healthBar.put("ProgressBar[Enabled].backgroundPainter", new MyPainter(Color.WHITE));
        PlayerHealthBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
        PlayerHealthBar.putClientProperty("Nimbus.Overrides", healthBar);

        EnemyHealthBar.setBackground(new java.awt.Color(255, 255, 255));
        EnemyHealthBar.setForeground(new java.awt.Color(255, 0, 0));
        EnemyHealthBar.setMaximum(101);
        EnemyHealthBar.setValue(100);
        EnemyHealthBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        EnemyHealthBar.setOpaque(true);
        jLayeredPane.add(EnemyHealthBar);
        EnemyHealthBar.setBounds(850, 230, 300, 40);
        //healthBar.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.RED));
        //healthBar.put("ProgressBar[Enabled].backgroundPainter", new MyPainter(Color.WHITE));
        EnemyHealthBar.setMaximum(RPGEnemy.enemyClass.getHealthPoints()+1);
        EnemyHealthBar.setValue(RPGEnemy.enemyHealth);
        jLayeredPane.remove(EnemyHealthBar);
        jLayeredPane.add(EnemyHealthBar,14);

        EnemyHealthBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
        EnemyHealthBar.putClientProperty("Nimbus.Overrides", healthBar);

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setForeground(new java.awt.Color(204, 0, 153));
        jPanel5.setOpaque(false);
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        EnemyBurnStatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/BurnIcon.png"))); // NOI18N
        EnemyBurnStatusIcon.setText("jLabel1");
        EnemyBurnStatusIcon.setToolTipText("Burn");
        jPanel5.add(EnemyBurnStatusIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 40, 40));

        EnemyVulnerableStatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/VulnerableIcon.png"))); // NOI18N
        EnemyVulnerableStatusIcon.setText("jLabel1");
        EnemyVulnerableStatusIcon.setToolTipText("Vulnerable");
        jPanel5.add(EnemyVulnerableStatusIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(113, 6, 40, 40));

        EnemyRevStatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/RevenantIcon.png"))); // NOI18N
        EnemyRevStatusIcon.setText("jLabel1");
        EnemyRevStatusIcon.setToolTipText("Revenant");
        jPanel5.add(EnemyRevStatusIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 6, 40, 40));

        EnemyShockStatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/ShockIcon.png"))); // NOI18N
        EnemyShockStatusIcon.setText("jLabel1");
        EnemyShockStatusIcon.setToolTipText("Shock");
        jPanel5.add(EnemyShockStatusIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(58, 6, 40, 40));

        EnemyBurnStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        EnemyBurnStatusLabel.setText("jLabel1");
        jPanel5.add(EnemyBurnStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 40, -1));

        EnemyShockStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        EnemyShockStatusLabel.setText("jLabel2");
        jPanel5.add(EnemyShockStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 40, -1));

        EnemyVulnerableStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        EnemyVulnerableStatusLabel.setText("jLabel4");
        jPanel5.add(EnemyVulnerableStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, -1));

        EnemyRevStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        EnemyRevStatusLabel.setText("jLabel5");
        jPanel5.add(EnemyRevStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, -1, -1));

        jLayeredPane.add(jPanel5);
        jPanel5.setBounds(860, 280, 211, 70);

        jPanel7.setBackground(new java.awt.Color(0, 0, 0));
        jPanel7.setForeground(new java.awt.Color(204, 0, 153));
        jPanel7.setOpaque(false);
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PlayerBurnStatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/BurnIcon.png"))); // NOI18N
        PlayerBurnStatusIcon.setText("jLabel1");
        PlayerBurnStatusIcon.setToolTipText("Burn");
        jPanel7.add(PlayerBurnStatusIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 40, 40));

        PlayerVulnerableStatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/VulnerableIcon.png"))); // NOI18N
        PlayerVulnerableStatusIcon.setText("jLabel1");
        PlayerVulnerableStatusIcon.setToolTipText("Vulnerable");
        jPanel7.add(PlayerVulnerableStatusIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(113, 6, 40, 40));

        PlayerChargingStatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/ChargeIcon.png"))); // NOI18N
        PlayerChargingStatusIcon.setText("jLabel1");
        PlayerChargingStatusIcon.setToolTipText("Charge");
        jPanel7.add(PlayerChargingStatusIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 6, 40, 40));

        PlayerShockStatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/ShockIcon.png"))); // NOI18N
        PlayerShockStatusIcon.setText("jLabel1");
        PlayerShockStatusIcon.setToolTipText("Shock");
        jPanel7.add(PlayerShockStatusIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(58, 6, 40, 40));

        PlayerBurnStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PlayerBurnStatusLabel.setText("jLabel1");
        jPanel7.add(PlayerBurnStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 50, 40, -1));

        PlayerShockStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PlayerShockStatusLabel.setText("jLabel2");
        jPanel7.add(PlayerShockStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 50, 40, -1));

        PlayerVulnerableStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PlayerVulnerableStatusLabel.setText("jLabel4");
        jPanel7.add(PlayerVulnerableStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, -1));

        PlayerChargingStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        PlayerChargingStatusLabel.setText("jLabel5");
        jPanel7.add(PlayerChargingStatusLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, -1, -1));

        jLayeredPane.add(jPanel7);
        jPanel7.setBounds(180, 430, 221, 66);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/battleBGGrass.png"))); // NOI18N
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel3.setMaximumSize(new java.awt.Dimension(1200, 800));
        jLabel3.setMinimumSize(new java.awt.Dimension(1200, 800));
        jLabel3.setOpaque(true);
        jLabel3.setPreferredSize(new java.awt.Dimension(1200, 800));
        jLayeredPane.add(jLabel3);
        jLabel3.setBounds(20, 30, 1200, 800);
        jLayeredPane.remove(jLabel3);
        jLayeredPane.add(jLabel3,20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLayeredPane)
                    .addComponent(jTabbedPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JLabel battleTab = new javax.swing.JLabel();
        battleTab.setPreferredSize(new Dimension(140, 30));
        battleTab.setText("Combat Window");

        JLabel statusTab = new javax.swing.JLabel();
        statusTab.setPreferredSize(new Dimension(140, 30));
        statusTab.setText("Status Window");

        jTabbedPane2.setTabComponentAt(0, battleTab);
        jTabbedPane2.setTabComponentAt(1, statusTab);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DefendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DefendButtonActionPerformed
        //if user presses defend button
        //calls the defend and playerTurnEnd function from the battleManager and
        //appends the returned combatlogs to the battleLog textBox in this window
        BattleLog.append(BattleManager.defend()+"\n"); 
        BattleLog.append(BattleManager.playerTurnEnd()+"\n"); 
        updateStatus();  //calls update status to change healthbars and status indicators
        healthCheck();   //check if either player or enemy is dead.
        if (BattleManager.enemyTurn==true) //if the enemytTurn flag in battlemanager is true
        {
            enemyTurnActions(); //take enemy turn
        }
    }//GEN-LAST:event_DefendButtonActionPerformed

    private void NormalAttackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NormalAttackActionPerformed
        //if user presses attack button
        //calls the attack and playerTurnEnd function from the battleManager and
        //appends the returned combatlog to the battleLog textBox in this window
        BattleManager.attack();
        BattleLog.append(BattleManager.playerTurnEnd()+"\n");
        updateStatus();   //calls update status to change healthbars and status indicators
        healthCheck();   //check if either player or enemy is dead.
        if (BattleManager.enemyTurn==true)   //if the enemytTurn flag in battlemanager is true
        {
            enemyTurnActions();   //take enemy turn
        }
    }//GEN-LAST:event_NormalAttackActionPerformed

    private void AbilitySelectorValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_AbilitySelectorValueChanged
        //if user selects an ability in the ability tab
        SelectedAbilityIndex = AbilitySelector.getSelectedIndex()+1;  //set selectedAbilityIndex to the selected ability +1 cuz it starts at 0
    }//GEN-LAST:event_AbilitySelectorValueChanged

    private void AbilityCastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbilityCastButtonActionPerformed
        //if user presses cast ability button
        //calls the ability function and playerTurnEnd function from battlemanager
        //and appends the returned combatlog to the battleLog textBox in this window 
        BattleManager.ability(SelectedAbilityIndex);
        BattleLog.append(BattleManager.playerTurnEnd());
        updateStatus(); //calls update status to change healthbars and status indicators
        healthCheck(); //check if either player or enemy is dead.
        if (BattleManager.enemyTurn==true)   //if the enemytTurn flag in battlemanager is true
        {
            enemyTurnActions();  //take enemy turn
        }
    }//GEN-LAST:event_AbilityCastButtonActionPerformed

    private void ForfeitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForfeitButtonActionPerformed
        //if user presses Forfeit button
        Object[] options = {"Yes, Quit to menu.",
                    "No, return to game."}; //setting text for dialog box options
        JFrame frame = new JFrame("Confirmation Box"); //creates dialog box to confirm user wants to forfeit battle/quit game
        forfeitCheck = JOptionPane.showOptionDialog(frame,
        "Are you sure you wish to forfeit this battle?",
        "Forfeit Confirmation",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        options,
        options[1]);
        if (forfeitCheck==0) //if user enteded the first option "quit to menu"
        {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new TitleScreenFrame().setVisible(true); //returns back to main title screen.
                }
            });
            this.setVisible(false); //makes this window invisible
        }      
    }//GEN-LAST:event_ForfeitButtonActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        updateStatus();
    }//GEN-LAST:event_formWindowActivated

    private void updateStatus()
    {
        //keeps visual elements like health bars up to date with the damage.
        EnemyHealthBar.setValue(BattleManager.enemyHealth); //sets EnemyHealthbar to enemyHealth value from battle manager
        EnemyHealthText.setText(BattleManager.enemyHealth+" / "+RPGEnemy.enemyClass.getHealthPoints());
        EnemyHealthText.updateUI();
        
        PlayerManaBar.setValue(BattleManager.playerMana); //sets playerManabar to playermana value from battle manager
        PlayerManaText.setText(BattleManager.playerMana+" / "+RPGPlayer.playerClass.getManaPoints());
        PlayerManaText.updateUI();
        
        PlayerHealthBar.setValue(BattleManager.playerHealth); //sets PlayerHealthbar to playerHealth value from battle manager
        PlayerHealthText.setText(BattleManager.playerHealth+" / "+RPGPlayer.playerClass.getHealthPoints());
        PlayerHealthText.updateUI();
        
        StatusTextArea.setText(BattleManager.statusCounter());  //updates the status log with all status effects on player
        //using statusCounter function from battlemanager.
        statusIcons();  //calls statusIcons function
    }
    
    private void statusIcons()
    {
        //sets all status icons to be invisible initially
        //and then makes them visible again depending on whether the player or enemy is currently inflicted with them.
        EnemyBurnStatusIcon.setVisible(false);
        EnemyShockStatusIcon.setVisible(false);
        EnemyVulnerableStatusIcon.setVisible(false);
        EnemyRevStatusIcon.setVisible(false);
        
        EnemyBurnStatusLabel.setVisible(false);
        EnemyShockStatusLabel.setVisible(false);
        EnemyVulnerableStatusLabel.setVisible(false);
        EnemyRevStatusLabel.setVisible(false);
        
        if (RPGEnemy.enemyClass.getDebuff("Flame")!=0) //if the given key exists in the status effect hashmap and is not zero
        {
            EnemyBurnStatusIcon.setVisible(true);
            EnemyBurnStatusLabel.setVisible(true);
            EnemyBurnStatusLabel.setText(""+RPGEnemy.enemyClass.getDebuff("Flame")); //print the value at the given key of the status effect map
        }
        if (RPGEnemy.enemyClass.getDebuff("Shock")!=0) //if the given key exists in the status effect hashmap and is not zero
        {
            EnemyShockStatusIcon.setVisible(true);
            EnemyShockStatusLabel.setVisible(true);
            EnemyShockStatusLabel.setText(""+RPGEnemy.enemyClass.getDebuff("Shock"));
        }
        if (RPGEnemy.enemyClass.getDebuff("Vulnerable")!=0) //if the given key exists in the status effect hashmap and is not zero
        {
            EnemyVulnerableStatusIcon.setVisible(true);
            EnemyVulnerableStatusLabel.setVisible(true);
            EnemyVulnerableStatusLabel.setText(""+RPGEnemy.enemyClass.getDebuff("Vulnerable"));
        }
        if (BattleManager.enemyPhaseChange == true) //if the given key exists in the status effect hashmap and is not zero
        {
            EnemyRevStatusIcon.setVisible(true);
            EnemyRevStatusLabel.setVisible(true);
            EnemyRevStatusLabel.setText("???");
            EnemySprite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/"+RPGEnemy.enemyClass.name+"Full.png")));
        }
        
        PlayerBurnStatusIcon.setVisible(false);
        PlayerShockStatusIcon.setVisible(false);
        PlayerVulnerableStatusIcon.setVisible(false);
        PlayerChargingStatusIcon.setVisible(false);
        
        PlayerBurnStatusLabel.setVisible(false);
        PlayerShockStatusLabel.setVisible(false);
        PlayerVulnerableStatusLabel.setVisible(false);
        PlayerChargingStatusLabel.setVisible(false);
        
        if (RPGPlayer.playerClass.getDebuff("Flame")!=0) //if the given key exists in the status effect hashmap and is not zero
        {
            PlayerBurnStatusIcon.setVisible(true);
            PlayerBurnStatusLabel.setVisible(true);
            PlayerBurnStatusLabel.setText(""+RPGPlayer.playerClass.getDebuff("Flame")); //print the value at the given key of the status effect map
        }
        if (RPGPlayer.playerClass.getDebuff("Shock")!=0) //if the given key exists in the status effect hashmap and is not zero
        {
            PlayerShockStatusIcon.setVisible(true);
            PlayerShockStatusLabel.setVisible(true);
            PlayerShockStatusLabel.setText(""+RPGPlayer.playerClass.getDebuff("Shock"));
        }
        if (RPGPlayer.playerClass.getDebuff("Vulnerable")!=0) //if the given key exists in the status effect hashmap and is not zero
        {
            PlayerVulnerableStatusIcon.setVisible(true);
            PlayerVulnerableStatusLabel.setVisible(true);
            PlayerVulnerableStatusLabel.setText(""+RPGPlayer.playerClass.getDebuff("Vulnerable"));
        }
        if (BattleManager.playerCharge == true || BattleManager.playerFlurry == true) //if the given key exists in the status effect hashmap and is not zero
        {
            PlayerChargingStatusIcon.setVisible(true);
            PlayerChargingStatusLabel.setVisible(true);
            PlayerChargingStatusLabel.setText(""+BattleManager.playerTurnsCharged);
        }
    }
    
    private void playerTurnActions()
    {
        updateStatus(); //calls update status to change healthbars and status indicators
        if ("".equals(BattleState)) //if battle status is still empty, check for the player and enemy's health
        {
            healthCheck();
        }
        BattleLog.append("\n\nTurn "+BattleManager.turnCounter+":\n"); //appends the current turn to the battle log
        if (BattleManager.playerCharge==true) //if player is currently charging an attack, continue charging and skip their turn
        {
            BattleManager.playerChargeAbility(); //calls playerChargeAbility Function from battleManager
            updateStatus();
            BattleLog.append(BattleManager.playerTurnEnd());
        }
    }
    
    private void healthCheck()
    {
        //checks if either the enemy or player has less than 1 health 
        //and gives the corresponding victory or loss message and sends them back to menu
        if (BattleManager.enemyHealth<1 && BattleManager.playerHealth>=1 )
        {
            Frame frame = new JFrame("Victory Box"); //congratulations message for winning the battle
            JOptionPane.showMessageDialog(frame, "Congrats you have won this battle,\nreturning to Main Menu.");
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new TitleScreenFrame().setVisible(true);
                }
            });
            this.setVisible(false);
            BattleState="win";
        }
        else if (BattleManager.playerHealth<1)
        {
            Frame frame = new JFrame("Loss Box");   //loss message for dieing during the battle.
            JOptionPane.showMessageDialog(frame, "You have lost this battle,\nreturning to Main Menu.");
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new TitleScreenFrame().setVisible(true);
                }
            });
            this.setVisible(false);
            BattleState="loss";
        }
    }
    
    private void enemyTurnActions()
    {
        if ("".equals(BattleState)) //if battleState is empty check enemy and player's health
        {
            healthCheck();
        }
        BattleManager.enemyTurn(); //calls enemy turn function from battleManager
        BattleLog.append(BattleManager.enemyTurnEnd()); //calls enemyturnend function and append returned combat log to battle log text box
        BattleLog.append(BattleManager.turnEnd());   //calls turnend function and append returned combat log to battle log text box
        updateStatus(); //calls update status to change healthbars and status indicators
        if (BattleManager.enemyTurn==false) //if enemyturn flag is false
        {
            playerTurnActions(); //start player turn.
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BattleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BattleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BattleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BattleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AbilityCastButton;
    private javax.swing.JList<String> AbilitySelector;
    private javax.swing.JTextArea BattleLog;
    private javax.swing.JLabel BattleLogHeader;
    private javax.swing.JButton DefendButton;
    private javax.swing.JLabel EnemyBurnStatusIcon;
    private javax.swing.JLabel EnemyBurnStatusLabel;
    private javax.swing.JProgressBar EnemyHealthBar;
    private javax.swing.JLabel EnemyHealthText;
    private javax.swing.JLabel EnemyRevStatusIcon;
    private javax.swing.JLabel EnemyRevStatusLabel;
    private javax.swing.JLabel EnemyShockStatusIcon;
    private javax.swing.JLabel EnemyShockStatusLabel;
    private javax.swing.JLabel EnemySprite;
    private javax.swing.JLabel EnemyVulnerableStatusIcon;
    private javax.swing.JLabel EnemyVulnerableStatusLabel;
    private javax.swing.JButton ForfeitButton;
    private javax.swing.JButton NormalAttack;
    private javax.swing.JLabel PlayerBurnStatusIcon;
    private javax.swing.JLabel PlayerBurnStatusLabel;
    private javax.swing.JLabel PlayerChargingStatusIcon;
    private javax.swing.JLabel PlayerChargingStatusLabel;
    private javax.swing.JTextArea PlayerDescription;
    private javax.swing.JTextArea PlayerDescription2;
    private javax.swing.JProgressBar PlayerHealthBar;
    private javax.swing.JLabel PlayerHealthText;
    private javax.swing.JLabel PlayerIcon;
    private javax.swing.JLabel PlayerImage;
    private javax.swing.JProgressBar PlayerManaBar;
    private javax.swing.JLabel PlayerManaText;
    private javax.swing.JLabel PlayerName;
    private javax.swing.JLabel PlayerName2;
    private javax.swing.JLabel PlayerShockStatusIcon;
    private javax.swing.JLabel PlayerShockStatusLabel;
    private javax.swing.JLabel PlayerSprite;
    private javax.swing.JLabel PlayerVulnerableStatusIcon;
    private javax.swing.JLabel PlayerVulnerableStatusLabel;
    private javax.swing.JTextArea StatusTextArea;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    public RPGPlayer createdPlayer = null;
    public RPGEnemy createdEnemy = null;
    public BattleManager BattleManager = new BattleManager(createdPlayer, createdEnemy);
    public int SelectedAbilityIndex;
    public int forfeitCheck=0;
    public String BattleState="";
}
