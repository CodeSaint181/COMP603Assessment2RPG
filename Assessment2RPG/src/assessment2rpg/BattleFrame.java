/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package assessment2rpg;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import javax.swing.*;
import javax.swing.UIDefaults;
import javax.swing.Painter;
/**
 *
 * @author sahil
 */
public class BattleFrame extends javax.swing.JFrame {

    /** Creates new form BattleFrame 
     * @param player
     * @param enemy
     */
    public BattleFrame(RPGPlayer player, RPGEnemy enemy) {
        initComponents();
        createdPlayer = player;
        createdEnemy = enemy;
    }
    
    class MyPainter implements Painter<JProgressBar> {

    private final Color color;

    public MyPainter(Color c1) {
        this.color = c1;
    }
    @Override
    public void paint(Graphics2D gd, JProgressBar t, int width, int height) {
        gd.setColor(color);
        gd.fillRect(0, 0, width, height);
    }
}
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        PlayerName = new javax.swing.JLabel();
        PlayerIcon = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PlayerDescription = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        BattleLog = new javax.swing.JTextArea();
        BattleLogHeader = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        NormalAttack = new javax.swing.JButton();
        DefendButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AbilitySelector = new javax.swing.JList<>();
        AbilityCastButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        PlayerDescription2 = new javax.swing.JTextArea();
        PlayerImage = new javax.swing.JLabel();
        PlayerName2 = new javax.swing.JLabel();
        jLayeredPane = new javax.swing.JLayeredPane();
        PlayerManaText = new javax.swing.JLabel();
        PlayerManaBar = new javax.swing.JProgressBar();
        PlayerHealthText = new javax.swing.JLabel();
        PlayerSprite = new javax.swing.JLabel();
        EnemySprite = new javax.swing.JLabel();
        EnemyHealthText = new javax.swing.JLabel();
        PlayerHealthBar = new javax.swing.JProgressBar();
        EnemyHealthBar = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PlayerName.setText("jLabel1");

        PlayerIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/"+RPGPlayer.className+".jpg")));
        PlayerIcon.setText("jLabel2");

        PlayerDescription.setColumns(20);
        PlayerDescription.setLineWrap(true);
        PlayerDescription.setRows(5);
        PlayerDescription.setWrapStyleWord(true);
        jScrollPane2.setViewportView(PlayerDescription);
        PlayerDescription.setText(RPGPlayer.printStatusWithoutSkills());

        BattleLog.setColumns(20);
        BattleLog.setRows(5);
        jScrollPane4.setViewportView(BattleLog);
        BattleLog.append("Turn "+BattleManager.turnCounter+"\n");

        BattleLogHeader.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        BattleLogHeader.setText("Battle Log");

        NormalAttack.setText("Normal Attack");
        NormalAttack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NormalAttackActionPerformed(evt);
            }
        });

        DefendButton.setText("Defend");
        DefendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DefendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(NormalAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(DefendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NormalAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DefendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane.addTab("Attack", jPanel3);

        AbilitySelector.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {""+RPGPlayer.playerClass.getAbility(1).get(0)+" - Mana Cost: "+RPGPlayer.playerClass.getAbility(1).get(3)+" - Desc: "+RPGPlayer.playerClass.getAbility(1).get(1), ""+RPGPlayer.playerClass.getAbility(2).get(0)+" - Mana Cost: "+RPGPlayer.playerClass.getAbility(2).get(3)+" - Desc: "+RPGPlayer.playerClass.getAbility(2).get(1), ""+RPGPlayer.playerClass.getAbility(3).get(0)+" - Mana Cost: "+RPGPlayer.playerClass.getAbility(3).get(3)+" - Desc: "+RPGPlayer.playerClass.getAbility(3).get(1)};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        AbilitySelector.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AbilitySelector.setVisibleRowCount(3);
        AbilitySelector.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                AbilitySelectorValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(AbilitySelector);

        AbilityCastButton.setText("Use Selected Ability");
        AbilityCastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbilityCastButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(AbilityCastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AbilityCastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Ability", jPanel4);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 504, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("Forfeit", jPanel6);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(BattleLogHeader))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PlayerName)
                                    .addComponent(PlayerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(PlayerName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PlayerIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BattleLogHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        UIDefaults healthBar = new UIDefaults();
        healthBar.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.RED));
        healthBar.put("ProgressBar[Enabled].backgroundPainter", new MyPainter(Color.WHITE));
        JLabel attacktab = new javax.swing.JLabel();
        attacktab.setPreferredSize(new Dimension(140, 30));
        attacktab.setText("Attack");

        JLabel abilitytab = new javax.swing.JLabel();
        abilitytab.setPreferredSize(new Dimension(140, 30));
        abilitytab.setText("Ability");

        JLabel forfeittab = new javax.swing.JLabel();
        forfeittab.setPreferredSize(new Dimension(140, 30));
        forfeittab.setText("Forfeit");

        jTabbedPane.setTabComponentAt(0, attacktab);
        jTabbedPane.setTabComponentAt(1, abilitytab);
        jTabbedPane.setTabComponentAt(2, forfeittab);

        jTabbedPane2.addTab("tab1", jPanel2);

        PlayerDescription2.setColumns(20);
        PlayerDescription2.setLineWrap(true);
        PlayerDescription2.setRows(5);
        jScrollPane3.setViewportView(PlayerDescription2);
        PlayerDescription2.setText(RPGPlayer.printStatusWithoutSkills());

        PlayerImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/"+RPGPlayer.className+".jpg")));

        PlayerName2.setText(RPGPlayer.name);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PlayerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(PlayerName2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(PlayerName2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 201, Short.MAX_VALUE)
                        .addComponent(PlayerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(296, 296, 296))
        );

        jTabbedPane2.addTab("tab2", jPanel1);

        jLayeredPane.setBackground(new java.awt.Color(148, 90, 33));
        jLayeredPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLayeredPane.setOpaque(true);

        PlayerManaText.setBackground(new java.awt.Color(255, 204, 0));
        PlayerManaText.setText(BattleManager.playerMana+" / "+RPGPlayer.playerClass.getManaPoints());
        PlayerManaText.setBorder(new javax.swing.border.MatteBorder(null));
        jLayeredPane.add(PlayerManaText);
        PlayerManaText.setBounds(180, 570, 76, 18);
        jLayeredPane.remove(PlayerManaText);
        jLayeredPane.add(PlayerManaText,14);

        PlayerManaBar.setBackground(new java.awt.Color(204, 204, 204));
        PlayerManaBar.setForeground(new java.awt.Color(51, 51, 51));
        PlayerManaBar.setMaximum(101);
        PlayerManaBar.setValue(100);
        PlayerManaBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        PlayerManaBar.setOpaque(true);
        jLayeredPane.add(PlayerManaBar);
        PlayerManaBar.setBounds(50, 560, 300, 40);
        jLayeredPane.remove(PlayerManaBar);
        jLayeredPane.add(PlayerManaBar,16);

        PlayerManaBar.setMaximum(RPGPlayer.playerClass.getManaPoints()+1);
        PlayerManaBar.setValue(BattleManager.playerMana);

        UIDefaults manaBar = new UIDefaults();
        manaBar.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.BLUE));
        manaBar.put("ProgressBar[Enabled].backgroundPainter", new MyPainter(Color.WHITE));
        PlayerManaBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
        PlayerManaBar.putClientProperty("Nimbus.Overrides", manaBar);

        PlayerHealthText.setBackground(new java.awt.Color(255, 204, 51));
        PlayerHealthText.setText(BattleManager.playerHealth+" / "+RPGPlayer.playerClass.getHealthPoints());
        PlayerHealthText.setBorder(new javax.swing.border.MatteBorder(null));
        jLayeredPane.add(PlayerHealthText);
        PlayerHealthText.setBounds(180, 500, 76, 18);
        jLayeredPane.remove(PlayerHealthText);
        jLayeredPane.add(PlayerHealthText,15);

        PlayerSprite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/"+RPGPlayer.className+".jpg")));
        PlayerSprite.setText("PlayerSprite");
        PlayerSprite.setOpaque(true);
        jLayeredPane.add(PlayerSprite);
        PlayerSprite.setBounds(370, 490, 150, 150);
        jLayeredPane.remove(PlayerSprite);
        jLayeredPane.add(PlayerSprite,18);

        EnemySprite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/"+RPGEnemy.enemyClass.name+".jpg")));
        EnemySprite.setText("EnemySprite");
        EnemySprite.setOpaque(true);
        jLayeredPane.add(EnemySprite);
        EnemySprite.setBounds(440, 230, 140, 150);
        jLayeredPane.remove(EnemySprite);
        jLayeredPane.add(EnemySprite,19);

        EnemyHealthText.setBackground(new java.awt.Color(255, 204, 51));
        EnemyHealthText.setText(BattleManager.enemyHealth+" / "+RPGEnemy.enemyClass.getHealthPoints());
        EnemyHealthText.setBorder(new javax.swing.border.MatteBorder(null));
        jLayeredPane.add(EnemyHealthText);
        EnemyHealthText.setBounds(730, 240, 76, 18);
        jLayeredPane.remove(EnemyHealthText);
        jLayeredPane.add(EnemyHealthText,13);

        PlayerHealthBar.setBackground(new java.awt.Color(204, 204, 204));
        PlayerHealthBar.setForeground(new java.awt.Color(51, 51, 51));
        PlayerHealthBar.setMaximum(101);
        PlayerHealthBar.setValue(100);
        PlayerHealthBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        PlayerHealthBar.setOpaque(true);
        jLayeredPane.add(PlayerHealthBar);
        PlayerHealthBar.setBounds(50, 490, 300, 40);
        jLayeredPane.remove(PlayerHealthBar);
        jLayeredPane.add(PlayerHealthBar,17);

        PlayerHealthBar.setMaximum(RPGPlayer.playerClass.getHealthPoints()+1);
        PlayerHealthBar.setValue(RPGPlayer.playerHealth);

        healthBar.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.RED));
        healthBar.put("ProgressBar[Enabled].backgroundPainter", new MyPainter(Color.WHITE));
        PlayerHealthBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
        PlayerHealthBar.putClientProperty("Nimbus.Overrides", healthBar);

        EnemyHealthBar.setBackground(new java.awt.Color(204, 204, 204));
        EnemyHealthBar.setForeground(new java.awt.Color(51, 51, 51));
        EnemyHealthBar.setMaximum(101);
        EnemyHealthBar.setValue(100);
        EnemyHealthBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        EnemyHealthBar.setOpaque(true);
        jLayeredPane.add(EnemyHealthBar);
        EnemyHealthBar.setBounds(600, 230, 300, 40);
        //healthBar.put("ProgressBar[Enabled].foregroundPainter", new MyPainter(Color.RED));
        //healthBar.put("ProgressBar[Enabled].backgroundPainter", new MyPainter(Color.WHITE));
        EnemyHealthBar.setMaximum(RPGEnemy.enemyClass.getHealthPoints()+1);
        EnemyHealthBar.setValue(RPGEnemy.enemyHealth);
        jLayeredPane.remove(EnemyHealthBar);
        jLayeredPane.add(EnemyHealthBar,14);

        EnemyHealthBar.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
        EnemyHealthBar.putClientProperty("Nimbus.Overrides", healthBar);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assessment2rpg/Images/battleBGGrass.png"))); // NOI18N
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel3.setOpaque(true);
        jLayeredPane.add(jLabel3);
        jLabel3.setBounds(20, 60, 900, 720);
        jLayeredPane.remove(jLabel3);
        jLayeredPane.add(jLabel3,20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 941, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLayeredPane)
                    .addComponent(jTabbedPane2))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DefendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DefendButtonActionPerformed
        BattleLog.append(BattleManager.defend()+"\n");
        BattleLog.append(BattleManager.playerTurnEnd()+"\n");
        updateHealthBars();
        if (BattleManager.enemyTurn==true)
        {
            enemyTurnActions();
        }
    }//GEN-LAST:event_DefendButtonActionPerformed

    private void NormalAttackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NormalAttackActionPerformed
        BattleManager.attack();
        BattleLog.append(BattleManager.playerTurnEnd()+"\n");
        updateHealthBars();
        if (BattleManager.enemyTurn==true)
        {
            enemyTurnActions();
        }
    }//GEN-LAST:event_NormalAttackActionPerformed

    private void AbilitySelectorValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_AbilitySelectorValueChanged
        SelectedAbilityIndex = AbilitySelector.getSelectedIndex()+1;
    }//GEN-LAST:event_AbilitySelectorValueChanged

    private void AbilityCastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbilityCastButtonActionPerformed
        BattleManager.ability(SelectedAbilityIndex);
        BattleLog.append(BattleManager.playerTurnEnd());
        updateHealthBars();
        if (BattleManager.enemyTurn==true)
        {
            enemyTurnActions();
        }
    }//GEN-LAST:event_AbilityCastButtonActionPerformed

    private void updateHealthBars()
    {
        EnemyHealthBar.setValue(BattleManager.enemyHealth);
        EnemyHealthText.setText(BattleManager.enemyHealth+" / "+RPGEnemy.enemyClass.getHealthPoints());
        EnemyHealthText.updateUI();
        
        PlayerManaBar.setValue(BattleManager.playerMana);
        PlayerManaText.setText(BattleManager.playerMana+" / "+RPGPlayer.playerClass.getManaPoints());
        PlayerManaText.updateUI();
        
        PlayerHealthBar.setValue(BattleManager.playerHealth);
        PlayerHealthText.setText(BattleManager.playerHealth+" / "+RPGPlayer.playerClass.getHealthPoints());
        PlayerHealthText.updateUI();
    }
    
    private void playerTurnActions()
    {
        BattleLog.append("\n\nTurn "+BattleManager.turnCounter+"\n");
        if (BattleManager.playerCharge==true)
        {
            BattleManager.playerChargeAbility();
            updateHealthBars();
            BattleLog.append(BattleManager.playerTurnEnd());
        }
    }
    
    private void enemyTurnActions()
    {
        BattleManager.enemyTurn();
        BattleLog.append(BattleManager.enemyTurnEnd());
        BattleLog.append(BattleManager.turnEnd());
        updateHealthBars();
        if (BattleManager.enemyTurn==false)
        {
            playerTurnActions();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BattleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BattleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BattleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BattleFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        //</editor-fold>
        RPGPlayer createdPlayer = new RPGPlayer("kirm","mage","flame blade");
        RPGEnemy createdEnemy = new RPGEnemy("slime");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               new BattleFrame(createdPlayer, createdEnemy).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AbilityCastButton;
    private javax.swing.JList<String> AbilitySelector;
    private javax.swing.JTextArea BattleLog;
    private javax.swing.JLabel BattleLogHeader;
    private javax.swing.JButton DefendButton;
    private javax.swing.JProgressBar EnemyHealthBar;
    private javax.swing.JLabel EnemyHealthText;
    private javax.swing.JLabel EnemySprite;
    private javax.swing.JButton NormalAttack;
    private javax.swing.JTextArea PlayerDescription;
    private javax.swing.JTextArea PlayerDescription2;
    private javax.swing.JProgressBar PlayerHealthBar;
    private javax.swing.JLabel PlayerHealthText;
    private javax.swing.JLabel PlayerIcon;
    private javax.swing.JLabel PlayerImage;
    private javax.swing.JProgressBar PlayerManaBar;
    private javax.swing.JLabel PlayerManaText;
    private javax.swing.JLabel PlayerName;
    private javax.swing.JLabel PlayerName2;
    private javax.swing.JLabel PlayerSprite;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTabbedPane jTabbedPane2;
    // End of variables declaration//GEN-END:variables
    public RPGPlayer createdPlayer = null;
    public RPGEnemy createdEnemy = null;
    public BattleStart BattleManager = new BattleStart(createdPlayer, createdEnemy);
    public int SelectedAbilityIndex;
}
